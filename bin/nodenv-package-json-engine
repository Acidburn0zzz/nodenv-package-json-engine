#!/usr/bin/env bash
#
# If a custom Node version is not already defined, we look
# for a Node version semver expressing in the current tree's package.json.
# If we find a fixed version, we print it out.  If we find a range we
# test the installed versions against that range and print the
# greatest matching version.

# Setup for relative includes
# http://stackoverflow.com/a/12694189/407845
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

find_package_json_path() {
  local root="$1"
  while [ -n "$root" ]; do
    if [ -e "${root}/package.json" ]; then
      echo "${root}/package.json"
      exit
    fi
    root="${root%/*}"
  done
}

should_find_in_package_json() {
  [ -z "$(nodenv local 2>/dev/null)" ]
}

version_from_package_json() {
  local version_regex='"node":[ \t]*"([^"]*)"'
  [[ `cat $PACKAGE_JSON_PATH` =~ $version_regex ]]
  local version_expression="${BASH_REMATCH[1]}"

  if [[ -n "$version_expression" ]] ; then
    installed_versions=$(nodenv versions --bare | xargs)
    version=$($DIR/../deps/semver.sh \
      -r "$version_expression" $installed_versions \
      | tail -n 1)
    if [[ -n "$version" ]] ; then
      echo $version
    else
      echo "$version_expression"
      exit 1
    fi
  fi
}

if should_find_in_package_json; then
  PACKAGE_JSON_PATH=$(find_package_json_path "$PWD")

  if [ -e "$PACKAGE_JSON_PATH" ]; then
    version_from_package_json
  fi
fi
